
%define _buildshell /bin/bash

%define using_buildservice	0%{?opensuse_bs}

%if ! 0%{?using_buildservice}
%define using_buildservice 0%(echo %disturl | grep -q '^obs://build\.[^.]*suse\.' && echo 1)
%endif

%if 0%{?suse_version} >= 1550
%define usrmerged 1
%else
%define usrmerged 0
%endif

%define source_rel %release
%define obsolete_rebuilds() %nil
%define obsolete_rebuilds_subpackage() %nil
%if %using_buildservice && ! 0%{?is_ptf}
%define source_rel %(echo %release | sed -r 's/\\.[0-9]+($|\\.[^.]*[^.0-9][^.]*$)/\\1/')
%define obsolete_rebuilds() %( \
	set -- $(echo %release | sed -rn 's/(.*\\.)([0-9]+)($|\\.[^.]*[^.0-9][^.]*$)/\\1 \\2 \\3/p') \
	if test -n "$2" && test "$2" -gt 99; then echo "warning: Rebuild counter too high in %release" >&2; exit 0; fi \
	for i in $(seq 1 $(($2-1))) ; do echo "Obsoletes: %1 = %version-$1$i$3" ; done \
)
%define obsolete_rebuilds_subpackage() %( \
	set -- $(echo %release | sed -rn 's/(.*\\.)([0-9]+)($|\\.[^.]*[^.0-9][^.]*$)/\\1 \\2 \\3/p') \
	if test -n "$2" && test "$2" -gt 99; then echo "warning: Rebuild counter too high in %release" >&2; exit 0; fi \
	cnt=$2
	set -- $(echo %source_rel | sed -rn 's/(.*\\.)([0-9]+)($|\\.[^.]*[^.0-9][^.]*$)/\\1 \\2 \\3/p') \
	if test -n "$2" && test "$2" -gt 99; then echo "warning: Upload counter too high in %source_rel" >&2; exit 0; fi \
	for i in $(seq 1 $2) ; do for j in $(seq 1 $cnt) ; do [ $i = $2 ] && [ $j = $cnt ] && break \
		echo "Obsoletes: %1 = %version-$1$i.$j$3" \
	done ; done \
)
%endif

%define kernelrelease %patchversion-%source_rel

%define kver_cmp() %{lua: print(rpm.vercmp(rpm.expand("%patchversion"), rpm.expand("%1")))}

%define my_builddir %_builddir/%{name}-%{version}

%define source_timestamp %(sed '1s/^/Source Timestamp: /' %_sourcedir/source-timestamp || :)

%define relink_function relink() {			\
    if [ -h "$2" ]; then				\
	local old=$(readlink "$2")			\
	[ "$old" = "$1" ] && return 0			\
	echo "Changing symlink $2 from $old to $1"	\
    elif [ -e "$2" ]; then				\
	echo "Replacing file $2 with symlink to $1"	\
    fi							\
    rm -f "$2" && ln -s "$1" "$2"			\
}

%if %{usrmerged}
%define kernel_module_directory /usr/lib/modules
%else
%define kernel_module_directory /lib/modules
%endif

%define run_if_exists run_if_exists() { \
if [ -x "$1" ] ; then                   \
  "$@"                                  \
else                                    \
  echo Cannot execute "$1" >&2          \
fi                                      \
}                                       \
run_if_exists

